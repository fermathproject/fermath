Fermath Conversions V0.9.3
*set<op> added to data_src class to store operators
*expression class in expression.h to store an expression with variables and operators
*new fermath_database, wich provides an interface to create a database of units and magnitudes

Fermath Conversions V0.9.2
*Adapted variable.h to unit
*new merge method for data_src class
*new fermath_database.cpp file, wich creates new database for fermath from a file (.dev)

Fermath Conversions V0.9
*Created class basic_unit in basic_unit.h file, removed conversion.h and unit.h
*created class complex_unit in complex_unit.h file
*added "source" classes for storage
*new glossary class to store all the names of units,magnitudes etd..
*data_src class control the relation between units and the gossary
**class op unchanged

Fermath Conversions V0.8
*Added class op in operator.h to store and process operators in fermath, using strings and operation_id
*changed operations class according to class op and class renamed conversion (now is in conversion.h)
*added operator_test.cpp to test new class op
*operations_test.cpp now changed and renamed as conversion_test.cpp
*added operators ==,=,<,> in class op
*changed class unit according to class conversion, also changed unit_test.cpp
*class unit only stores name and symbol instead of vector<string>
*class unit operator+ removed
*class magnitude changed according to new class unit
*class magnitude now stores two strings instead of vector<string>
*class magnitude now stores a principal unit and set of secondary units
*added class names_list in names.h (not tested)
**templates.h unchanged
***operator *,/ in class unit bug fixed
****Warning: class variable not working properly
****Warning: class expression not tested
****Warning: class names not tested

Fermath Conversions V0.7
*Added macros to change the size of some of the values of the classes like ids
*Changed classes according to the macros
*added a method in operations to check if all the operations are products or divisions
*Now the units can be a basic unit (just a conversion) or complex unit (product of basic units)
*all methods of class unit changed according to basic/complex unit
*added private methods for testing and clean complex units in unit.h
*added function erase in templates.h, wich erase an element of a vector if it exist and simplify_vectors
*added new templates in templates.h
*added operators * and / to create complex units from basic units, also added *= and /=
*changed operators in class variable according to unit changes
*new templates in templates.h for work with vectors of pointers (needed for unit class)
*class variable now handle different bases when operating (dec,hex...)
*added some method to variable for rounding off
*new methods in beta_rep.h for checking and reporting errors
**functions.h unchanged
***Bug to fix in variable.h (operators *,/,<<)

Fermath Conversions V0.6
*added new methods in class variable and changed operators + and - (variable.h)
*added operators *,/,+=,-=,*=,/= (also changed variable_test.cpp)
*added unary minus (-) operator to variable class
*changed vector<int> to vector<unsigned> in class operations in operations.h
*new expression class in expression.h that solve operations using stacks (also new expression_test.cpp)
*variable class now has unit instead of unit* and a new int that allows to work with squared units
*magnitude_id in unit is now unsigned short
*all write methods are now const
*class operations works with unsigned short intead of int, less memory occupied when writting
*more efficient file writting
**fuctions.h not changed
**some of the test have not been changed
*added the script compile.sh, to compile all the tests

Fermath Conversions V0.5
*removed id from class unit (and methods that use it)
*added operators =,==,!= to operations class in operations.h (also changed operations_test.cpp)
*added operators =,==,!=,+ to unit class in unit.h (also changed unit_test.cpp)
*added new template add_vector in templates.h (also changed templates_test.cpp)
*added operators =,==,!=,+ to magnitude class in magnitude.h (also changed magnitude_test.cpp)
*changed operator+ in class variable in variable.h
*added operators =,==,!= to class variable in variable.h
*new file called variable_test.cpp to test class variable
*small changes in const methods of classes
**functions.h unchanged

Fermath Conversions V0.4
*added templates.h and templates_test.cpp, some templates for read/writing vectors
*added write/read operations in a binary file in operations.h and contructor from file
*added operator << to class unit in unit.h
*all math neccesary for operations class is now in the operations class in operation.h as private methods
*now the principal name and symbol of an unit are the first and second string of names vector
*new file functions.h with some useful functions for Fermath and function_test.cpp to test functions.h
*all .h files are now in the /include directory
*all test generated files will have .test extension
*magnitude principal name,type and unit are now the first elements of vectors names and units
*added have_name to unit class
*added search_by name in magnitude class
*added operator << to magnitude class
*added write/read methods in magnitude class
*added some new methods for searching units in magnitude class
*new program magnitude_test.cpp to test magnitude class
**variable.h not upgraded

Fermath Conversions V0.3
*added remove_operation and operator<< to class operations in operations .h
*new operations_test.cpp to test only the class operations
*small changes in math_functions.h
*added convert_from to class unit in unit.h
*new unit_test.cpp to test class unit
*added operator + to class variable in variable.h(not tested)

Fermath Conversions V0.2
*changed conversion.h and class conversion into operations.h and class operations
*added new set/get methods for unit and magnitude
*added new class variable in variable.h

